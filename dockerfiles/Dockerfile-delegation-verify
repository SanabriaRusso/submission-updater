#################################################################################################
# The "stateless verification build" Stage
# - builds stateless verification tool
# - adds submission_updater binary to /bin
#################################################################################################

# Builder image
# publish date: 2025-09-03
# gcloud container images list-tags gcr.io/o1labs-192920/mina-toolchain --format=json --filter="digest=sha256:c810338e2c3973f7c674d0607048725917ce2be23b949c4bc9760c01122f884b"
FROM gcr.io/o1labs-192920/mina-toolchain@sha256:3b17e388d8974fdbe4bbd5f77315519763c78148a4c91434d9add62de87ab792 AS builder

# Use --build-arg "DUNE_PROFILE=dev" to build a dev image or for CI
ARG DUNE_PROFILE=mainnet

# branch to checkout on first clone (this will be the only availible branch in the container)
# can also be a tagged release
ARG MINA_BRANCH=berkeley

# repo to checkout the branch from
ARG MINA_REPO=https://github.com/MinaProtocol/mina

# location of repo used for pins and external package commits
ARG MINA_DIR=mina

ENV PATH "$PATH:/usr/lib/go/bin:$HOME/.cargo/bin"

# git will clone into an empty dir, but this also helps us set the workdir in advance
RUN cd $HOME && rm -rf $HOME/${MINA_DIR} \
    && git clone \
    -b "${MINA_BRANCH}" \
    --depth 1 \
    --shallow-submodules \
    --recurse-submodules \
    ${MINA_REPO} ${HOME}/${MINA_DIR}

WORKDIR $HOME/${MINA_DIR}

RUN git submodule sync && git submodule update --init --recursive

RUN mkdir ${HOME}/app

# HACK: build without special cpu features to allow more people to run delegation verification tool
# RUN ./scripts/zexe-standardize.sh

RUN eval $(opam config env) \
    && dune build --profile=${DUNE_PROFILE} \
    src/app/delegation_verify/delegation_verify.exe \
    && cp _build/default/src/app/delegation_verify/delegation_verify.exe ./delegation-verify \
    && rm -rf _build

USER root

# copy binary to /bin
RUN cp ./delegation-verify /bin/delegation-verify

# Runtime image
FROM golang:1.22-bullseye

# Copy resources from builder to runtime image
COPY --from=builder /bin/delegation-verify /bin/delegation-verify

RUN apt-get update && apt-get install -y jq libjemalloc2 wget dnsutils gawk

# Install libssl1.1.1b (not in apt)
RUN wget https://www.openssl.org/source/openssl-1.1.1b.tar.gz
RUN mkdir /opt/openssl
RUN tar xfvz openssl-1.1.1b.tar.gz --directory /opt/openssl
RUN rm openssl-1.1.1b.tar.gz

ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/openssl/lib"
ENV PATH="$PATH:/opt/openssl/bin"

RUN cd /opt/openssl/openssl-1.1.1b && ./config --prefix=/opt/openssl --openssldir=/opt/openssl/ssl
RUN cd /opt/openssl/openssl-1.1.1b && make && make install

# Rename openssl old binary
RUN mv /usr/bin/openssl /usr/bin/openssl.old

# Set the Current Working Directory inside the container
WORKDIR $GOPATH/src

# Copy everything from the current directory to the PWD (Present Working Directory) inside the container
COPY src src
COPY database/cert/sf-class2-root.crt /root/.cassandra/sf-class2-root.crt
COPY genesis_ledgers/mainnet.json /root/genesis_ledgers/mainnet.json

# Download all the dependencies
RUN cd src && go get -d -v ./...

# Install the package
RUN cd src && go install -v ./...

ENV DELEGATION_VERIFY_BIN_PATH=/bin/delegation-verify
ENV SSL_CERTFILE=/root/.cassandra/sf-class2-root.crt
ENV GENESIS_LEDGER_FILE=/root/genesis_ledgers/mainnet.json

# Run the executable
ENTRYPOINT ["submission_updater"]